/**
 *
 * @author MoaathAlrajab
 */
   
    // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over one hundred divisors?
    
    */
import java.util.ArrayList;

//creates node
    class Node {
        public int triNum;
        public int[] factors;
        public int factorCount;
        public Node next;
        
        public Node(int triNum, int[] factors, int factorCount) {
            this.triNum = triNum;
            this.factors = factors;
            this.factorCount = factorCount;
            this.next = null;
        }
    }
//creates linked list        
    class LinkedList {
        private Node head;
        private Node tail;
        
        public LinkedList() {
            head = null;
            tail = null;
        }
        
        public void append(Node newNode) {
            if (head == null) {
                head = newNode;
                tail = newNode;
            }
            else {
                tail.next = newNode;
                tail = newNode;
            }
        }
        
        public void printList() {
            Node node = head;
            while (node != null) {
                System.out.println(node.triNum + ": ");
                System.out.println("Total Factors: " + node.factorCount);
                System.out.print("Factors: ");
                for(int i=0; i<node.factors.length; i++){
                    System.out.print(node.factors[i] + ", ");
                }
                node = node.next;
                System.out.println();
            }
        }
        //calculates triangle numbers and populates list
        public void getTriangleNums(int n) {
            for (int i=1; i<=n; i++) {
                int triNum = i*(i+1)/2;
                int[] triNumFactors;
                
                triNumFactors = getNumFactors(triNum);
                
                int factorCount = triNumFactors.length;
                
                Node newNode = new Node(triNum, triNumFactors, factorCount);
                
                append(newNode);
            }
        }
        
        /*stores factors in ArrayList to adjust size of array
        copies factors from ArrayList into int Array*/
        
        public int[] getNumFactors(int n) {
            ArrayList<Integer> factors = new ArrayList<Integer>();
            
            for (int i = 1; i <= n; i++) {
                if (n % i == 0) {
                    factors.add(i); 
                }
            }
            int[] factorsArr = new int[factors.size()];
            for (int i=0; i<factors.size(); i++) {
                factorsArr[i] = factors.get(i);
            }
            
            return factorsArr;
        }
        
        //finds the first instance of a triangle num with
        //more than 100 factors
        public void greaterThanOneHundred() {
            Node temp = head;
            int flag = 0;
            while (temp != null) {
                if (temp.factorCount >= 100) {
                    System.out.println("Triangle number: " + temp.triNum +
                            " has more than 100 factors");
                    System.out.println("Number of factors: " + temp.factorCount);
                    break;
                }
                temp = temp.next;
            }
            
        }
    
        
        
    }
    
